const test = require('tape')
const flamegraph = require('../dist/flamegraph')

test('Callstack.recursive() is false for empty callstack', function (t) {
  const callstack = new flamegraph.Callstack()
  t.notOk(callstack.recursive('A'))
  t.notOk(callstack.recursive('B'))
  callstack.push('A')
  callstack.pop(0)
  t.notOk(callstack.recursive('A'))
  t.notOk(callstack.recursive('B'))
  callstack.push('A')
  callstack.push('B')
  callstack.push('C')
  callstack.push('D')
  callstack.pop(0)
  t.notOk(callstack.recursive('A'))
  t.notOk(callstack.recursive('B'))
  t.notOk(callstack.recursive('C'))
  t.notOk(callstack.recursive('D'))
  t.end()
})

test('Callstack.recursive() is true for frames in the callstack', function (t) {
  const callstack = new flamegraph.Callstack()
  callstack.push('A')
  t.ok(callstack.recursive('A'))
  callstack.push('B')
  t.ok(callstack.recursive('A'))
  t.ok(callstack.recursive('B'))
  callstack.push('B')
  t.ok(callstack.recursive('A'))
  t.ok(callstack.recursive('B'))
  callstack.push('C')
  t.ok(callstack.recursive('A'))
  t.ok(callstack.recursive('B'))
  t.ok(callstack.recursive('C'))
  t.end()
})

test('Callstack.pop() removes frames from the callstack', function (t) {
  const callstack = new flamegraph.Callstack()
  callstack.push('A')
  callstack.push('B')
  callstack.pop(1)
  t.ok(callstack.recursive('A'))
  t.notOk(callstack.recursive('B'))
  t.end()
})

test('Callstack.pop() single frame removal correctness', function (t) {
  const callstack = new flamegraph.Callstack()
  callstack.push('A')
  callstack.push('B')
  callstack.push('C')
  callstack.push('C')
  callstack.pop(3)
  t.ok(callstack.recursive('A'))
  t.ok(callstack.recursive('B'))
  t.ok(callstack.recursive('C'))
  callstack.pop(2)
  t.ok(callstack.recursive('A'))
  t.ok(callstack.recursive('B'))
  t.notOk(callstack.recursive('C'))
  callstack.pop(1)
  t.ok(callstack.recursive('A'))
  t.notOk(callstack.recursive('B'))
  t.notOk(callstack.recursive('C'))
  callstack.pop(0)
  t.notOk(callstack.recursive('A'))
  t.notOk(callstack.recursive('B'))
  t.notOk(callstack.recursive('C'))
  t.end()
})

test('Callstack.pop() multiple frames removal correctness', function (t) {
  const callstack = new flamegraph.Callstack()
  callstack.push('A')
  callstack.push('B')
  callstack.push('C')
  callstack.push('D')
  callstack.push('D')
  callstack.push('E')
  callstack.pop(4)
  t.ok(callstack.recursive('A'))
  t.ok(callstack.recursive('B'))
  t.ok(callstack.recursive('C'))
  t.ok(callstack.recursive('D'))
  t.notOk(callstack.recursive('E'))
  callstack.pop(2)
  t.ok(callstack.recursive('A'))
  t.ok(callstack.recursive('B'))
  t.notOk(callstack.recursive('C'))
  t.notOk(callstack.recursive('D'))
  t.notOk(callstack.recursive('E'))
  callstack.pop(0)
  t.notOk(callstack.recursive('A'))
  t.notOk(callstack.recursive('B'))
  t.notOk(callstack.recursive('C'))
  t.notOk(callstack.recursive('D'))
  t.notOk(callstack.recursive('E'))
  t.end()
})

test('Callstack.push() returns recursivity of pushed frame', function (t) {
  const callstack = new flamegraph.Callstack()
  t.notOk(callstack.push('A'))
  t.notOk(callstack.push('B'))
  t.notOk(callstack.push('C'))
  t.ok(callstack.push('C'))
  t.ok(callstack.push('C'))
  t.ok(callstack.push('B'))
  t.ok(callstack.push('A'))
  t.notOk(callstack.push('D'))
  t.notOk(callstack.push('E'))
  t.ok(callstack.push('E'))
  t.ok(callstack.push('D'))
  callstack.pop(0)
  t.notOk(callstack.push('A'))
  t.notOk(callstack.push('B'))
  t.notOk(callstack.push('C'))
  t.ok(callstack.push('C'))
  t.ok(callstack.push('C'))
  callstack.pop(3)
  t.ok(callstack.push('C'))
  t.notOk(callstack.push('D'))
  t.end()
})